package skiplist;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class SkipList<K extends Comparable<K>, V>
{
	private Random rng;
	private int height;
	//Upper left node
	private SkipListNode<K, V> head;
	//Lower left node
	private SkipListNode<K, V> init;
	
	public SkipList()
	{
		this.rng = new Random();
		this.height = 0;
		
		this.head = new SkipListNode<K, V>(false);
		this.init = this.head;
		SkipListNode<K, V> tail = new SkipListNode<K, V>(true);
		
		this.horiLink(this.head, tail);
	}
	
	private void vertLink(SkipListNode<K, V> upper, SkipListNode<K, V> lower)
	{
		upper.setBelow(lower);
		lower.setAbove(upper);
	}
	
	private void horiLink(SkipListNode<K, V> left, SkipListNode<K, V> right)
	{
		left.setNext(right);
		right.setPrev(left);
	}
	
	//Adds a new empty level
	private void grow()
	{
		SkipListNode<K, V> nextHead = new SkipListNode<K, V>(false);
		SkipListNode<K, V> nextTail = new SkipListNode<K, V>(true);
		
		nextHead.setNext(nextTail);
		nextTail.setPrev(nextHead);
		
		this.vertLink(nextHead, this.head);
		this.vertLink(nextTail, this.head.getNext());
		
		this.head = nextHead;
		
		this.height++;
	}
	
	public int size()
	{
		int count = -2;
		for(SkipListNode<K, V> node = this.init; node != null; node = node.getNext())
		{
			count++;
		}
		return count;
	}
	
	public boolean isEmpty()
	{
		return (this.size() == 0);
	}
	
	public List<K> keys()
	{
		ArrayList<K> result = new ArrayList<K>();
		for(SkipListNode<K, V> node = this.init.getNext(); node != null; node = node.getNext())
		{
			result.add(node.getKey());
		}
		result.remove(result.size() - 1);
		return result;
	}
	
	public SkipListNode<K, V> search(K key)
	{
		SkipListNode<K, V> node = this.head;
		while(true)
		{
			for(; node.getNext().compareTo(key) <= 0; node = node.getNext());
			if(node.getBelow() == null)
			{
				break;
			}
			node = node.getBelow();
		}
		return node;
	}
	
	private void retrace(SkipListNode<K, V> node, int height)
	{
		SkipListNode<K, V> next;
		SkipListNode<K, V> below;
		SkipListNode<K, V> prev = node.getPrev();
		while(height > 0)
		{
			if(prev.getAbove() == null)
			{
				prev = prev.getPrev();
			}
			else
			{
				prev = prev.getAbove();
				next = prev.getNext();
				
				below = node;
				node = new SkipListNode<K, V>(node.getKey(), node.getValue());
				this.vertLink(node, below);
				
				next = prev.getNext();
				this.horiLink(prev, node);
				this.horiLink(node, next);
				height--;
			}
		}
	}
	
	public V put(K key, V value)
	{
		V result = null;
		SkipListNode<K, V> prev = this.search(key);
		if(prev.compareTo(key) == 0)
		{
			result = prev.getValue();
			for(; prev != null; prev = prev.getAbove())
			{
				prev.setValue(value);
			}
		}
		else
		{
			int height = 0;
			for(; this.rng.nextBoolean(); height++);
			while(this.height <= height)
			{
				this.grow();
			}
			SkipListNode<K, V> node = new SkipListNode<K, V>(key, value);
			SkipListNode<K, V> next = prev.getNext();
			this.horiLink(prev, node);
			this.horiLink(node, next);
			retrace(node, height);
		}
		return result;
	}
	
	public V get(K key)
	{
		SkipListNode<K, V> node = this.search(key);
		if(node.compareTo(key) == 0)
		{
			return node.getValue();
		}
		return null;
	}
	
	public V remove(K key)
	{
		SkipListNode<K, V> node = this.search(key);
		if(node.compareTo(key) != 0)
		{
			return null;
		}
		V result = node.getValue();
		for(; node != null; node = node.getAbove())
		{
			this.horiLink(node.getPrev(), node.getNext());
		}
		return result;
	}
}