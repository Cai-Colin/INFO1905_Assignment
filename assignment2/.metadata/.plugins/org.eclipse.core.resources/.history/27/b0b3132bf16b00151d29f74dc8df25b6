package doublehashmap;

import java.util.ArrayList;
import java.util.List;

public class DoubleHashMap<K extends Comparable<K>, V>
{
	private HashMapNode<K, V>[] array;
	
	//Parameters
	private int multiplier;
	private int modulus;
	private int secondaryModulus;
	
	//Collision statistics
	private int collisions;
	private int probes;
	private int maxProbes;
	private int failures;
	
	//Sentinel value that removed values are replaced with
	private HashMapNode<K, V> SENTINEL;
	{
		SENTINEL = new HashMapNode<K, V>(null, null);
	}
	
	//Construct a DoubleHashMap with 4000 places and given hash parameters
	@SuppressWarnings("unchecked")
	public DoubleHashMap(int multiplier, int modulus, int secondaryModulus)
	{
		this.array = (HashMapNode<K, V>[]) new HashMapNode[4000];
		this.multiplier = multiplier;
		this.modulus = modulus;
		this.secondaryModulus = secondaryModulus;
		this.collisions = 0;
		this.probes = 0;
		this.maxProbes = 0;
		this.failures = 0;
	}
	
	//Construct a DoubleHashMap with given capacity and given hash parameters
	@SuppressWarnings("unchecked")
	public DoubleHashMap(int hashMapSize, int multiplier, int modulus, int secondaryModulus)
	{
		this.array = (HashMapNode<K, V>[]) new HashMapNode[hashMapSize];
		this.multiplier = multiplier;
		this.modulus = modulus;
		this.secondaryModulus = secondaryModulus;
		this.collisions = 0;
		this.probes = 0;
		this.maxProbes = 0;
	}

	public int hash(K key)
	{
		return this.multiplier * Math.abs(key.hashCode()) % this.modulus % this.array.length;
	}
	
	public int secondaryHash(K key)
	{
		return (this.secondaryModulus - (Math.abs(key.hashCode()) % this.secondaryModulus)) % this.array.length;
	}
	
	//Return the number of nodes
	public int size()
	{
		int count = 0;
		for(HashMapNode<K, V> node : this.array)
		{
			if(node != null && node != this.SENTINEL)
			{
				count++;
			}
		}
		return count;
	}
	
	//Returns whether or not the hashmap is empty
	public boolean isEmpty()
	{
		return (this.size() == 0);
	}
	
	//Returns a list of keys
	public List<K> keys()
	{
		List<K> keys = new ArrayList<K>();
		for(HashMapNode<K, V> node : this.array)
		{
			if(node != null && node != this.SENTINEL)
			{
				keys.add(node.getKey());
			}
		}
		return keys;
	}
	
	//Inserts an element, returns the previous value stored in the key (if any)
	public V put(K key, V value)
	{
		int index = this.hash(key);
		int increment = this.secondaryHash(key);
		int i = index;
		int tries = 0;
		V result = null;
		while(true)
		{
			if(this.array[i] == null || this.array[i] == this.SENTINEL)
			{
				this.array[i] = new HashMapNode<K, V>(key, value);
				break;
			}
			else if(key.equals(this.array[i].getKey()))
			{
				result = this.array[i].getValue();
				this.array[i].setValue(value);
				tries = 0;
				break;
			}
			tries++;
			i = (i + increment) % this.array.length;
			if(i == index)
			{
				break;
			}
		}
		if(tries > this.maxProbes)
		{
			this.maxProbes = tries;
		}
		this.probes += tries;
		this.collisions += Integer.signum(tries);
		return result;
	}
	
	//Given a key, returns the index it is stored under it if it exists, else returns null
	private int find(K key)
	{
		int index = this.hash(key);
		int increment = this.secondaryHash(key);
		int i = index;
		do
		{
			if(this.array[i] == null)
			{
				return -1;
			}
			if(key.equals(this.array[i].getKey()))
			{
				return i;
			}
			i = (i + increment) % this.array.length;
		}
		while(i != index);
		return 0;
	}
	
	//Returns a stored value given its key
	public V get(K key)
	{
		int index = this.find(key);
		if(index == -1)
		{
			return null;
		}
		else
		{
			return this.array[index].getValue();
		}
	}
	
	//Removes a stored value and returns it, given its key
	public V remove(K key)
	{
		int index = this.find(key);
		if(index == -1)
		{
			return null;
		}
		else
		{
			V result = this.array[index].getValue();
			this.array[index] = this.SENTINEL;
			return result;
		}
	}
	
	//Returns the number of collisions
	public int putCollisions()
	{
		return this.collisions;
	}
	
	//Returns the total number of probes
	public int totalCollisions()
	{
		return this.probes;
	}
	
	//Returns the largest amount of probes needed for a single collision
	public int maxCollisions()
	{
		return this.maxProbes;
	}
	
	//Resets all the statistics
	public void resetStatistics()
	{
		this.collisions = 0;
		this.probes = 0;
		this.maxProbes = 0;
	}
}