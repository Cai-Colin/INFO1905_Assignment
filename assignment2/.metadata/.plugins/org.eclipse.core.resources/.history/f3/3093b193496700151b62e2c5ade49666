package doublehashmap;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.junit.Test;

public class DoubleHashMapTest
{
	@Test
	public void testConstruction()
	{
		DoubleHashMap<String, String> h = new DoubleHashMap<String, String>(1, 1, 1);
		assertTrue(h.isEmpty());
		assertEquals(0, h.size());
		assertEquals(0, h.putCollisions());
		assertEquals(0, h.totalCollisions());
		assertEquals(0, h.maxCollisions());
		assertEquals(new ArrayList<String>(), h.keys());
	}
	
	@Test
	public void testCollision()
	{
		DoubleHashMap<String, String> h = new DoubleHashMap<String, String>(1, 2, 1);		
		/**
		 * [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]...
		 */
		assertEquals(0, h.putCollisions());
		assertEquals(0, h.totalCollisions());
		assertEquals(0, h.maxCollisions());
		/**
		 * "a" has a primary hash of 1, and a secondary hash of 1
		 * 
		 *     a
		 *     A
		 *     |
		 * [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]...
		 * [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]...
		 * 
		 * [ ][a][ ][ ][ ][ ][ ][ ][ ][ ]...
		 * [ ][A][ ][ ][ ][ ][ ][ ][ ][ ]...
		 */
		h.put("a", "A");
		assertEquals(0, h.putCollisions());
		assertEquals(0, h.totalCollisions());
		assertEquals(0, h.maxCollisions());
		/**
		 * "b" has a primary hash of 0, and a secondary hash of 1
		 * 
		 *  b
		 *  B
		 *  |
		 * [ ][a][ ][ ][ ][ ][ ][ ][ ][ ]...
		 * [ ][A][ ][ ][ ][ ][ ][ ][ ][ ]...
		 * 
		 * [b][a][ ][ ][ ][ ][ ][ ][ ][ ]...
		 * [B][A][ ][ ][ ][ ][ ][ ][ ][ ]...
		 */
		h.put("b", "B");
		assertEquals(0, h.putCollisions());
		assertEquals(0, h.totalCollisions());
		assertEquals(0, h.maxCollisions());
		/**
		 * "c" has a primary hash of 1, and a secondary hash of 1
		 * 
		 *     c
		 *     C
		 *     |
		 * [b][a][ ][ ][ ][ ][ ][ ][ ][ ]...
		 * [B][A][ ][ ][ ][ ][ ][ ][ ][ ]...
		 * 
		 *        c
		 *        C
		 *        |
		 * [b][a][ ][ ][ ][ ][ ][ ][ ][ ]...
		 * [B][A][ ][ ][ ][ ][ ][ ][ ][ ]...
		 * 
		 * [b][a][c][ ][ ][ ][ ][ ][ ][ ]...
		 * [B][A][C][ ][ ][ ][ ][ ][ ][ ]...
		 */
		h.put("c", "C");
		assertEquals(1, h.putCollisions());
		assertEquals(1, h.totalCollisions());
		assertEquals(1, h.maxCollisions());
		/**
		 * "d" has a primary hash of 0, and a secondary hash of 1
		 * 
		 *  d
		 *  D
		 *  |
		 * [b][a][c][ ][ ][ ][ ][ ][ ][ ]...
		 * [B][A][C][ ][ ][ ][ ][ ][ ][ ]...
		 * 
		 *     d
		 *     D
		 *     |
		 * [b][a][c][ ][ ][ ][ ][ ][ ][ ]...
		 * [B][A][C][ ][ ][ ][ ][ ][ ][ ]...
		 * 
		 *        d
		 *        D
		 *        |
		 * [b][a][c][ ][ ][ ][ ][ ][ ][ ]...
		 * [B][A][C][ ][ ][ ][ ][ ][ ][ ]...
		 * 
		 *           d
		 *           D
		 *           |
		 * [b][a][c][ ][ ][ ][ ][ ][ ][ ]...
		 * [B][A][C][ ][ ][ ][ ][ ][ ][ ]...
		 * 
		 * [b][a][c][d][ ][ ][ ][ ][ ][ ]...
		 * [B][A][C][D][ ][ ][ ][ ][ ][ ]...
		 */
		h.put("d", "D");
		assertEquals(2, h.putCollisions());
		assertEquals(4, h.totalCollisions());
		assertEquals(3, h.maxCollisions());
		/**
		 * Probe and collisions statistics should not change
		 * when replacing the value of a key already in the array
		 */
		h.put("d", "F");
		assertEquals(2, h.putCollisions());
		assertEquals(4, h.totalCollisions());
		assertEquals(3, h.maxCollisions());
		/**
		 * "f" has a primary hash of 0, and a secondary hash of 1
		 * 
		 *  f
		 *  A
		 *  |
		 * [b][ ][c][ ][ ][ ][ ][ ][ ][ ]...
		 * [B][ ][C][ ][ ][ ][ ][ ][ ][ ]...
		 * 
		 *     f
		 *     A
		 *     |
		 * [b][ ][c][ ][ ][ ][ ][ ][ ][ ]...
		 * [B][ ][C][ ][ ][ ][ ][ ][ ][ ]...
		 * 
		 * [b][f][c][d][ ][ ][ ][ ][ ][ ]...
		 * [B][A][C][D][ ][ ][ ][ ][ ][ ]...
		 */
		h.remove("a");
		h.put("f", "A");
		assertEquals(3, h.putCollisions());
		assertEquals(5, h.totalCollisions());
		assertEquals(3, h.maxCollisions());
		/**
		 * Reset should set all statistics to 0
		 */
		h.resetStatistics();
		assertEquals(0, h.putCollisions());
		assertEquals(0, h.totalCollisions());
		assertEquals(0, h.maxCollisions());
	}

	@Test
	public void testKeys()
	{
		DoubleHashMap<String, String> h = new DoubleHashMap<String, String>(1, 427, 647);
		List<String> keys = new ArrayList<String>();
		List<String> test = new ArrayList<String>();
		
		h.put("a", "B");
		test.add("a");
		keys = h.keys();
		Collections.sort(test);
		Collections.sort(keys);
		assertEquals(test, keys);
		
		h.put("b", "C");
		test.add("b");
		keys = h.keys();
		Collections.sort(test);
		Collections.sort(keys);
		assertEquals(test, keys);
		
		h.put("c", "D");
		test.add("c");
		keys = h.keys();
		Collections.sort(test);
		Collections.sort(keys);
		assertEquals(test, keys);
		
		h.put("d", "E");
		test.add("d");
		keys = h.keys();
		Collections.sort(test);
		Collections.sort(keys);
		assertEquals(test, keys);
		
		h.put("e", "F");
		test.add("e");
		keys = h.keys();
		Collections.sort(test);
		Collections.sort(keys);
		assertEquals(test, keys);
		
		h.put("a", "A");
		keys = h.keys();
		Collections.sort(test);
		Collections.sort(keys);
		assertEquals(test, keys);
	}
	
	@Test
	public void testPut()
	{
		DoubleHashMap<String, String> h = new DoubleHashMap<String, String>(1, 427, 647);

		h.put("a", "B");
		assertEquals(1, h.size());
		assertEquals("B", h.get("a"));
		assertEquals(null, h.get("A"));
		
		h.put("b", "C");
		assertEquals(2, h.size());
		assertEquals("C", h.get("b"));
		
		h.put("c", "D");
		assertEquals(3, h.size());
		assertEquals("D", h.get("c"));
		
		h.put("d", "E");
		assertEquals(4, h.size());
		assertEquals("E", h.get("d"));
		
		h.put("e", "F");
		h.put("E", "a");
		assertEquals(6, h.size());
		assertEquals("F", h.get("e"));
		assertEquals("a", h.get("E"));
		
		h.put("a", "C");
		assertEquals(6, h.size());
		assertEquals("C", h.get("a"));
	}
	
	@Test
	public void testRemove()
	{
		DoubleHashMap<String, String> h = new DoubleHashMap<String, String>(1, 427, 647);

		h.put("a", "B");
		h.put("b", "C");
		h.put("c", "D");
		h.put("d", "E");
		h.put("e", "F");
		h.put("E", "a");

		assertEquals(null, h.remove("A"));
		assertEquals(null, h.get("A"));
		assertEquals("B", h.remove("a"));
		assertEquals(null, h.get("a"));
		assertEquals("C", h.remove("b"));
		assertEquals(null, h.get("b"));
		assertEquals("D", h.remove("c"));
		assertEquals(null, h.get("c"));
		assertEquals("E", h.remove("d"));
		assertEquals(null, h.get("d"));
		assertEquals("F", h.remove("e"));
		assertEquals(null, h.get("e"));
		assertEquals("a", h.remove("E"));
		assertEquals(null, h.get("E"));
	}
}
