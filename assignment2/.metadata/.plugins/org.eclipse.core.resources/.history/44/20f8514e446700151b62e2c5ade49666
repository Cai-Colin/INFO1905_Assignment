package doublehashmap;

import static org.junit.Assert.*;

import java.util.ArrayList;

import org.junit.Test;

public class DoubleHashMapTest
{
	@Test
	public void testConstruction()
	{
		DoubleHashMap<String, String> h = new DoubleHashMap<String, String>(1, 1, 1);
		assertTrue(h.isEmpty());
		assertEquals(0, h.size());
		assertEquals(0, h.putCollisions());
		assertEquals(0, h.totalCollisions());
		assertEquals(0, h.maxCollisions());
		assertEquals(new ArrayList<String>(), h.keys());
	}
	
	@Test
	public void testCollision()
	{
		DoubleHashMap<String, String> h = new DoubleHashMap<String, String>(1, 2, 1);
		
		System.out.println("a: " + h.hash("a") + ", " + h.secondaryHash("a"));
		System.out.println("b: " + h.hash("b") + ", " + h.secondaryHash("b"));
		System.out.println("c: " + h.hash("c") + ", " + h.secondaryHash("c"));
		System.out.println("d: " + h.hash("d") + ", " + h.secondaryHash("d"));
		
		/**
		 * [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]...
		 */
		assertEquals(0, h.putCollisions());
		assertEquals(0, h.totalCollisions());
		assertEquals(0, h.maxCollisions());
		/**
		 * "a" has a primary hash of 1, and a secondary hash of 1
		 * 
		 *     a
		 *     A
		 *     |
		 * [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]...
		 * [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]...
		 * 
		 * [ ][a][ ][ ][ ][ ][ ][ ][ ][ ]...
		 * [ ][A][ ][ ][ ][ ][ ][ ][ ][ ]...
		 */
		h.put("a", "A");
		assertEquals(0, h.putCollisions());
		assertEquals(0, h.totalCollisions());
		assertEquals(0, h.maxCollisions());
		/**
		 * "b" has a primary hash of 0, and a secondary hash of 1
		 * 
		 *  b
		 *  B
		 *  |
		 * [ ][a][ ][ ][ ][ ][ ][ ][ ][ ]...
		 * [ ][A][ ][ ][ ][ ][ ][ ][ ][ ]...
		 * 
		 * [b][a][ ][ ][ ][ ][ ][ ][ ][ ]...
		 * [B][A][ ][ ][ ][ ][ ][ ][ ][ ]...
		 */
		h.put("b", "B");
		assertEquals(0, h.putCollisions());
		assertEquals(0, h.totalCollisions());
		assertEquals(0, h.maxCollisions());
		/**
		 * "c" has a primary hash of 1, and a secondary hash of 1
		 * 
		 *     c
		 *     C
		 *     |
		 * [b][a][ ][ ][ ][ ][ ][ ][ ][ ]...
		 * [B][A][ ][ ][ ][ ][ ][ ][ ][ ]...
		 * 
		 *        c
		 *        C
		 *        |
		 * [b][a][ ][ ][ ][ ][ ][ ][ ][ ]...
		 * [B][A][ ][ ][ ][ ][ ][ ][ ][ ]...
		 * 
		 * [b][a][c][ ][ ][ ][ ][ ][ ][ ]...
		 * [B][A][C][ ][ ][ ][ ][ ][ ][ ]...
		 */
		h.put("c", "C");
		assertEquals(1, h.putCollisions());
		assertEquals(1, h.totalCollisions());
		assertEquals(1, h.maxCollisions());
		/**
		 * "d" has a primary hash of 0, and a secondary hash of 1
		 * 
		 *  d
		 *  D
		 *  |
		 * [b][a][c][ ][ ][ ][ ][ ][ ][ ]...
		 * [B][A][C][ ][ ][ ][ ][ ][ ][ ]...
		 * 
		 *     d
		 *     D
		 *     |
		 * [b][a][c][ ][ ][ ][ ][ ][ ][ ]...
		 * [B][A][C][ ][ ][ ][ ][ ][ ][ ]...
		 * 
		 *        d
		 *        D
		 *        |
		 * [b][a][c][ ][ ][ ][ ][ ][ ][ ]...
		 * [B][A][C][ ][ ][ ][ ][ ][ ][ ]...
		 * 
		 *           d
		 *           D
		 *           |
		 * [b][a][c][ ][ ][ ][ ][ ][ ][ ]...
		 * [B][A][C][ ][ ][ ][ ][ ][ ][ ]...
		 * 
		 * [b][a][c][d][ ][ ][ ][ ][ ][ ]...
		 * [B][A][C][D][ ][ ][ ][ ][ ][ ]...
		 */
		h.put("d", "D");
		assertEquals(2, h.putCollisions());
		assertEquals(4, h.totalCollisions());
		assertEquals(3, h.maxCollisions());
		/**
		 * Probe and collisions statistics should not change
		 * when replacing the value of a key already in the array
		 */
		h.put("d", "E");
		assertEquals(2, h.putCollisions());
		assertEquals(4, h.totalCollisions());
		assertEquals(3, h.maxCollisions());
		h.resetStatistics();
		assertEquals(0, h.putCollisions());
		assertEquals(0, h.totalCollisions());
		assertEquals(0, h.maxCollisions());
	}
}
